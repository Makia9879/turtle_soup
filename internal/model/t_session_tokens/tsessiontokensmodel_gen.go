// Code generated by goctl. Templates Edited by jzero. DO NOT EDIT.

package t_session_tokens

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/jzero-io/jzero-contrib/modelx"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tSessionTokensFieldNames          = builder.RawFieldNames(&TSessionTokens{})
	tSessionTokensRows                = strings.Join(tSessionTokensFieldNames, ",")
	tSessionTokensRowsExpectAutoSet   = strings.Join(stringx.Remove(tSessionTokensFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tSessionTokensRowsWithPlaceHolder = strings.Join(stringx.Remove(tSessionTokensFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTSessionTokensIdPrefix    = "cache:tSessionTokens:id:"
	cacheTSessionTokensTokenPrefix = "cache:tSessionTokens:token:"
)

type (
	tSessionTokensModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *TSessionTokens) (sql.Result, error)
		InsertWithCache(ctx context.Context, session sqlx.Session, data *TSessionTokens) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id uint64) (*TSessionTokens, error)
		FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*TSessionTokens, error)
		FindOneByToken(ctx context.Context, session sqlx.Session, token string) (*TSessionTokens, error)
		FindOneByTokenWithCache(ctx context.Context, session sqlx.Session, token string) (*TSessionTokens, error)
		Update(ctx context.Context, session sqlx.Session, data *TSessionTokens) error
		UpdateWithCache(ctx context.Context, session sqlx.Session, data *TSessionTokens) error
		Delete(ctx context.Context, session sqlx.Session, id uint64) error
		DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*TSessionTokens) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TSessionTokens, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*TSessionTokens, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TSessionTokens, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultTSessionTokensModel struct {
		cachedConn sqlc.CachedConn
		conn       sqlx.SqlConn
		table      string
	}

	TSessionTokens struct {
		Id                uint64    `db:"id"`
		Token             string    `db:"token"`
		ActivityToken     string    `db:"activity_token"`
		RemainingAttempts int64     `db:"remaining_attempts"`
		RemainingAnswers  int64     `db:"remaining_answers"`
		CreatedAt         time.Time `db:"created_at"`
	}
)

func newTSessionTokensModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultTSessionTokensModel {
	o := opts.DefaultApply(op...)
	var cachedConn sqlc.CachedConn
	if len(o.CacheConf) > 0 {
		cachedConn = sqlc.NewConn(conn, o.CacheConf, o.CacheOpts...)
	}
	if o.CachedConn != nil {
		cachedConn = *o.CachedConn
	}
	return &defaultTSessionTokensModel{
		cachedConn: cachedConn,
		conn:       conn,
		table:      "`T_session_tokens`",
	}
}
func (m *defaultTSessionTokensModel) Delete(ctx context.Context, session sqlx.Session, id uint64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	statement, args := sb.Build()
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultTSessionTokensModel) DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error {
	data, err := m.FindOne(ctx, session, id)
	if err != nil {
		return err
	}

	tSessionTokensIdKey := fmt.Sprintf("%s%v", cacheTSessionTokensIdPrefix, id)
	tSessionTokensTokenKey := fmt.Sprintf("%s%v", cacheTSessionTokensTokenPrefix, data.Token)
	_, err = m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.DeleteFrom(m.table)
		sb.Where(sb.EQ("`id`", id))
		statement, args := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, tSessionTokensIdKey, tSessionTokensTokenKey)
	return err
}

func (m *defaultTSessionTokensModel) FindOne(ctx context.Context, session sqlx.Session, id uint64) (*TSessionTokens, error) {
	sb := sqlbuilder.Select(tSessionTokensRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp TSessionTokens
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSessionTokensModel) FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*TSessionTokens, error) {
	tSessionTokensIdKey := fmt.Sprintf("%s%v", cacheTSessionTokensIdPrefix, id)
	var resp TSessionTokens
	err := m.cachedConn.QueryRowCtx(ctx, &resp, tSessionTokensIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		sb := sqlbuilder.Select(tSessionTokensRows).From(m.table)
		sb.Where(sb.EQ("`id`", id))
		sql, args := sb.Build()
		if session != nil {
			return session.QueryRowCtx(ctx, v, sql, args...)
		}
		return conn.QueryRowCtx(ctx, v, sql, args...)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSessionTokensModel) FindOneByToken(ctx context.Context, session sqlx.Session, token string) (*TSessionTokens, error) {
	var resp TSessionTokens
	var err error

	sb := sqlbuilder.Select(tSessionTokensRows).From(m.table)
	condition.SelectByWhereRawSql(sb, "`token` = ?", token)
	sb.Limit(1)

	sql, args := sb.Build()

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}

	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSessionTokensModel) FindOneByTokenWithCache(ctx context.Context, session sqlx.Session, token string) (*TSessionTokens, error) {
	tSessionTokensTokenKey := fmt.Sprintf("%s%v", cacheTSessionTokensTokenPrefix, token)
	var resp TSessionTokens
	err := m.cachedConn.QueryRowIndexCtx(ctx, &resp, tSessionTokensTokenKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		sb := sqlbuilder.Select(tSessionTokensRows).From(m.table)
		condition.SelectByWhereRawSql(sb, "`token` = ?", token)
		sb.Limit(1)
		sql, args := sb.Build()
		var err error

		if session != nil {
			err = session.QueryRowCtx(ctx, &resp, sql, args...)
		} else {
			err = conn.QueryRowCtx(ctx, &resp, sql, args...)
		}
		if err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSessionTokensModel) Insert(ctx context.Context, session sqlx.Session, data *TSessionTokens) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(tSessionTokensRowsExpectAutoSet).
		Values(data.Token, data.ActivityToken, data.RemainingAttempts, data.RemainingAnswers).Build()
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultTSessionTokensModel) InsertWithCache(ctx context.Context, session sqlx.Session, data *TSessionTokens) (sql.Result, error) {
	tSessionTokensIdKey := fmt.Sprintf("%s%v", cacheTSessionTokensIdPrefix, data.Id)
	tSessionTokensTokenKey := fmt.Sprintf("%s%v", cacheTSessionTokensTokenPrefix, data.Token)
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(tSessionTokensRowsExpectAutoSet).
		Values(data.Token, data.ActivityToken, data.RemainingAttempts, data.RemainingAnswers).Build()
	return m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, tSessionTokensIdKey, tSessionTokensTokenKey)
}
func (m *defaultTSessionTokensModel) Update(ctx context.Context, session sqlx.Session, newData *TSessionTokens) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(tSessionTokensRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	statement, _ := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, newData.Token, newData.ActivityToken, newData.RemainingAttempts, newData.RemainingAnswers, newData.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, newData.Token, newData.ActivityToken, newData.RemainingAttempts, newData.RemainingAnswers, newData.Id)
	}
	return err
}

func (m *defaultTSessionTokensModel) UpdateWithCache(ctx context.Context, session sqlx.Session, newData *TSessionTokens) error {
	data, err := m.FindOne(ctx, session, newData.Id)
	if err != nil {
		return err
	}
	tSessionTokensIdKey := fmt.Sprintf("%s%v", cacheTSessionTokensIdPrefix, data.Id)
	tSessionTokensTokenKey := fmt.Sprintf("%s%v", cacheTSessionTokensTokenPrefix, data.Token)
	_, err = m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.Update(m.table)
		split := strings.Split(tSessionTokensRowsExpectAutoSet, ",")
		var assigns []string
		for _, s := range split {
			assigns = append(assigns, sb.Assign(s, nil))
		}
		sb.Set(assigns...)
		sb.Where(sb.EQ("`id`", nil))
		statement, _ := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, newData.Token, newData.ActivityToken, newData.RemainingAttempts, newData.RemainingAnswers, newData.Id)
		}
		return conn.ExecCtx(ctx, statement, newData.Token, newData.ActivityToken, newData.RemainingAttempts, newData.RemainingAnswers, newData.Id)
	}, tSessionTokensIdKey, tSessionTokensTokenKey)
	return err
}

func (m *defaultTSessionTokensModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTSessionTokensIdPrefix, primary)
}

func (m *defaultTSessionTokensModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	sb := sqlbuilder.Select(tSessionTokensRows).From(m.table)
	sb.Where(sb.EQ("`id`", primary))
	sql, args := sb.Build()
	return conn.QueryRowCtx(ctx, v, sql, args...)
}

func (m *defaultTSessionTokensModel) tableName() string {
	return m.table
}

func (m *customTSessionTokensModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*TSessionTokens) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(tSessionTokensRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.Token, data.ActivityToken, data.RemainingAttempts, data.RemainingAnswers)
	}
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customTSessionTokensModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TSessionTokens, error) {
	sb := sqlbuilder.Select(tSessionTokensFieldNames...).From(m.table)
	builder := condition.Select(*sb, conds...)
	statement, args := builder.Build()

	var resp []*TSessionTokens
	var err error

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customTSessionTokensModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*TSessionTokens, error) {
	sb := sqlbuilder.Select(tSessionTokensFieldNames...).From(m.table)

	builder := condition.Select(*sb, conds...)
	builder.Limit(1)
	statement, args := builder.Build()

	var resp TSessionTokens
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customTSessionTokensModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TSessionTokens, int64, error) {
	sb := sqlbuilder.Select(tSessionTokensFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	builder := condition.Select(*sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	countBuilder := condition.Select(*countsb, countConds...)

	var resp []*TSessionTokens
	var err error

	statement, args := builder.Build()

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	var total int64
	statement, args = countBuilder.Build()
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customTSessionTokensModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	builder := condition.Update(*sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	builder.Set(assigns...)

	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customTSessionTokensModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	builder := condition.Delete(*sb, conds...)
	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
