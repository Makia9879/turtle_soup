// Code generated by goctl. Templates Edited by jzero. DO NOT EDIT.

package t_activity_tokens

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/jzero-io/jzero-contrib/modelx"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tActivityTokensFieldNames          = builder.RawFieldNames(&TActivityTokens{})
	tActivityTokensRows                = strings.Join(tActivityTokensFieldNames, ",")
	tActivityTokensRowsExpectAutoSet   = strings.Join(stringx.Remove(tActivityTokensFieldNames, "`id`"), ",")
	tActivityTokensRowsWithPlaceHolder = strings.Join(stringx.Remove(tActivityTokensFieldNames, "`id`"), "=?,") + "=?"

	cacheTActivityTokensIdPrefix    = "cache:tActivityTokens:id:"
	cacheTActivityTokensTokenPrefix = "cache:tActivityTokens:token:"
)

type (
	tActivityTokensModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *TActivityTokens) (sql.Result, error)
		InsertWithCache(ctx context.Context, session sqlx.Session, data *TActivityTokens) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id uint64) (*TActivityTokens, error)
		FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*TActivityTokens, error)
		FindOneByToken(ctx context.Context, session sqlx.Session, token string) (*TActivityTokens, error)
		FindOneByTokenWithCache(ctx context.Context, session sqlx.Session, token string) (*TActivityTokens, error)
		Update(ctx context.Context, session sqlx.Session, data *TActivityTokens) error
		UpdateWithCache(ctx context.Context, session sqlx.Session, data *TActivityTokens) error
		Delete(ctx context.Context, session sqlx.Session, id uint64) error
		DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*TActivityTokens) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TActivityTokens, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*TActivityTokens, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TActivityTokens, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultTActivityTokensModel struct {
		cachedConn sqlc.CachedConn
		conn       sqlx.SqlConn
		table      string
	}

	TActivityTokens struct {
		Id        uint64    `db:"id"`
		Token     string    `db:"token"`
		ExpiresAt time.Time `db:"expires_at"`
		CreatedAt time.Time `db:"created_at"`
	}
)

func newTActivityTokensModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultTActivityTokensModel {
	o := opts.DefaultApply(op...)
	var cachedConn sqlc.CachedConn
	if len(o.CacheConf) > 0 {
		cachedConn = sqlc.NewConn(conn, o.CacheConf, o.CacheOpts...)
	}
	if o.CachedConn != nil {
		cachedConn = *o.CachedConn
	}
	return &defaultTActivityTokensModel{
		cachedConn: cachedConn,
		conn:       conn,
		table:      "`T_activity_tokens`",
	}
}
func (m *defaultTActivityTokensModel) Delete(ctx context.Context, session sqlx.Session, id uint64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	statement, args := sb.Build()
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultTActivityTokensModel) DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error {
	data, err := m.FindOne(ctx, session, id)
	if err != nil {
		return err
	}

	tActivityTokensIdKey := fmt.Sprintf("%s%v", cacheTActivityTokensIdPrefix, id)
	tActivityTokensTokenKey := fmt.Sprintf("%s%v", cacheTActivityTokensTokenPrefix, data.Token)
	_, err = m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.DeleteFrom(m.table)
		sb.Where(sb.EQ("`id`", id))
		statement, args := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, tActivityTokensIdKey, tActivityTokensTokenKey)
	return err
}

func (m *defaultTActivityTokensModel) FindOne(ctx context.Context, session sqlx.Session, id uint64) (*TActivityTokens, error) {
	sb := sqlbuilder.Select(tActivityTokensRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp TActivityTokens
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTActivityTokensModel) FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*TActivityTokens, error) {
	tActivityTokensIdKey := fmt.Sprintf("%s%v", cacheTActivityTokensIdPrefix, id)
	var resp TActivityTokens
	err := m.cachedConn.QueryRowCtx(ctx, &resp, tActivityTokensIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		sb := sqlbuilder.Select(tActivityTokensRows).From(m.table)
		sb.Where(sb.EQ("`id`", id))
		sql, args := sb.Build()
		if session != nil {
			return session.QueryRowCtx(ctx, v, sql, args...)
		}
		return conn.QueryRowCtx(ctx, v, sql, args...)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTActivityTokensModel) FindOneByToken(ctx context.Context, session sqlx.Session, token string) (*TActivityTokens, error) {
	var resp TActivityTokens
	var err error

	sb := sqlbuilder.Select(tActivityTokensRows).From(m.table)
	condition.SelectByWhereRawSql(sb, "`token` = ?", token)
	sb.Limit(1)

	sql, args := sb.Build()

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}

	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTActivityTokensModel) FindOneByTokenWithCache(ctx context.Context, session sqlx.Session, token string) (*TActivityTokens, error) {
	tActivityTokensTokenKey := fmt.Sprintf("%s%v", cacheTActivityTokensTokenPrefix, token)
	var resp TActivityTokens
	err := m.cachedConn.QueryRowIndexCtx(ctx, &resp, tActivityTokensTokenKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		sb := sqlbuilder.Select(tActivityTokensRows).From(m.table)
		condition.SelectByWhereRawSql(sb, "`token` = ?", token)
		sb.Limit(1)
		sql, args := sb.Build()
		var err error

		if session != nil {
			err = session.QueryRowCtx(ctx, &resp, sql, args...)
		} else {
			err = conn.QueryRowCtx(ctx, &resp, sql, args...)
		}
		if err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTActivityTokensModel) Insert(ctx context.Context, session sqlx.Session, data *TActivityTokens) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(tActivityTokensRowsExpectAutoSet).
		Values(data.Token, data.ExpiresAt, data.CreatedAt).Build()
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultTActivityTokensModel) InsertWithCache(ctx context.Context, session sqlx.Session, data *TActivityTokens) (sql.Result, error) {
	tActivityTokensIdKey := fmt.Sprintf("%s%v", cacheTActivityTokensIdPrefix, data.Id)
	tActivityTokensTokenKey := fmt.Sprintf("%s%v", cacheTActivityTokensTokenPrefix, data.Token)
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(tActivityTokensRowsExpectAutoSet).
		Values(data.Token, data.ExpiresAt, data.CreatedAt).Build()
	return m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, tActivityTokensIdKey, tActivityTokensTokenKey)
}
func (m *defaultTActivityTokensModel) Update(ctx context.Context, session sqlx.Session, newData *TActivityTokens) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(tActivityTokensRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	statement, _ := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, newData.Token, newData.ExpiresAt, newData.CreatedAt, newData.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, newData.Token, newData.ExpiresAt, newData.CreatedAt, newData.Id)
	}
	return err
}

func (m *defaultTActivityTokensModel) UpdateWithCache(ctx context.Context, session sqlx.Session, newData *TActivityTokens) error {
	data, err := m.FindOne(ctx, session, newData.Id)
	if err != nil {
		return err
	}
	tActivityTokensIdKey := fmt.Sprintf("%s%v", cacheTActivityTokensIdPrefix, data.Id)
	tActivityTokensTokenKey := fmt.Sprintf("%s%v", cacheTActivityTokensTokenPrefix, data.Token)
	_, err = m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.Update(m.table)
		split := strings.Split(tActivityTokensRowsExpectAutoSet, ",")
		var assigns []string
		for _, s := range split {
			assigns = append(assigns, sb.Assign(s, nil))
		}
		sb.Set(assigns...)
		sb.Where(sb.EQ("`id`", nil))
		statement, _ := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, newData.Token, newData.ExpiresAt, newData.CreatedAt, newData.Id)
		}
		return conn.ExecCtx(ctx, statement, newData.Token, newData.ExpiresAt, newData.CreatedAt, newData.Id)
	}, tActivityTokensIdKey, tActivityTokensTokenKey)
	return err
}

func (m *defaultTActivityTokensModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTActivityTokensIdPrefix, primary)
}

func (m *defaultTActivityTokensModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	sb := sqlbuilder.Select(tActivityTokensRows).From(m.table)
	sb.Where(sb.EQ("`id`", primary))
	sql, args := sb.Build()
	return conn.QueryRowCtx(ctx, v, sql, args...)
}

func (m *defaultTActivityTokensModel) tableName() string {
	return m.table
}

func (m *customTActivityTokensModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*TActivityTokens) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(tActivityTokensRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.Token, data.ExpiresAt, data.CreatedAt)
	}
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customTActivityTokensModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TActivityTokens, error) {
	sb := sqlbuilder.Select(tActivityTokensFieldNames...).From(m.table)
	builder := condition.Select(*sb, conds...)
	statement, args := builder.Build()

	var resp []*TActivityTokens
	var err error

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customTActivityTokensModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*TActivityTokens, error) {
	sb := sqlbuilder.Select(tActivityTokensFieldNames...).From(m.table)

	builder := condition.Select(*sb, conds...)
	builder.Limit(1)
	statement, args := builder.Build()

	var resp TActivityTokens
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customTActivityTokensModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TActivityTokens, int64, error) {
	sb := sqlbuilder.Select(tActivityTokensFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	builder := condition.Select(*sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	countBuilder := condition.Select(*countsb, countConds...)

	var resp []*TActivityTokens
	var err error

	statement, args := builder.Build()

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	var total int64
	statement, args = countBuilder.Build()
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customTActivityTokensModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	builder := condition.Update(*sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	builder.Set(assigns...)

	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customTActivityTokensModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	builder := condition.Delete(*sb, conds...)
	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
