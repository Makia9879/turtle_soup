// Code generated by goctl. Templates Edited by jzero. DO NOT EDIT.

package t_turtle_soup_stories

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/eddieowens/opts"
	"github.com/huandu/go-sqlbuilder"
	"github.com/jzero-io/jzero-contrib/condition"
	"github.com/jzero-io/jzero-contrib/modelx"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tTurtleSoupStoriesFieldNames          = builder.RawFieldNames(&TTurtleSoupStories{})
	tTurtleSoupStoriesRows                = strings.Join(tTurtleSoupStoriesFieldNames, ",")
	tTurtleSoupStoriesRowsExpectAutoSet   = strings.Join(stringx.Remove(tTurtleSoupStoriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tTurtleSoupStoriesRowsWithPlaceHolder = strings.Join(stringx.Remove(tTurtleSoupStoriesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTTurtleSoupStoriesIdPrefix = "cache:tTurtleSoupStories:id:"
)

type (
	tTurtleSoupStoriesModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *TTurtleSoupStories) (sql.Result, error)
		InsertWithCache(ctx context.Context, session sqlx.Session, data *TTurtleSoupStories) (sql.Result, error)
		FindOne(ctx context.Context, session sqlx.Session, id uint64) (*TTurtleSoupStories, error)
		FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*TTurtleSoupStories, error)
		Update(ctx context.Context, session sqlx.Session, data *TTurtleSoupStories) error
		UpdateWithCache(ctx context.Context, session sqlx.Session, data *TTurtleSoupStories) error
		Delete(ctx context.Context, session sqlx.Session, id uint64) error
		DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error

		// custom interface generated by jzero
		BulkInsert(ctx context.Context, session sqlx.Session, datas []*TTurtleSoupStories) error
		FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TTurtleSoupStories, error)
		FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*TTurtleSoupStories, error)
		PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TTurtleSoupStories, int64, error)
		UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error
		DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error
	}

	defaultTTurtleSoupStoriesModel struct {
		cachedConn sqlc.CachedConn
		conn       sqlx.SqlConn
		table      string
	}

	TTurtleSoupStories struct {
		Id        uint64    `db:"id"`
		Title     string    `db:"title"`
		Surface   string    `db:"surface"`
		Bottom    string    `db:"bottom"`
		CreatedAt time.Time `db:"created_at"`
	}
)

func newTTurtleSoupStoriesModel(conn sqlx.SqlConn, op ...opts.Opt[modelx.ModelOpts]) *defaultTTurtleSoupStoriesModel {
	o := opts.DefaultApply(op...)
	var cachedConn sqlc.CachedConn
	if len(o.CacheConf) > 0 {
		cachedConn = sqlc.NewConn(conn, o.CacheConf, o.CacheOpts...)
	}
	if o.CachedConn != nil {
		cachedConn = *o.CachedConn
	}
	return &defaultTTurtleSoupStoriesModel{
		cachedConn: cachedConn,
		conn:       conn,
		table:      "`T_turtle_soup_stories`",
	}
}
func (m *defaultTTurtleSoupStoriesModel) Delete(ctx context.Context, session sqlx.Session, id uint64) error {
	sb := sqlbuilder.DeleteFrom(m.table)
	sb.Where(sb.EQ("`id`", id))
	statement, args := sb.Build()
	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *defaultTTurtleSoupStoriesModel) DeleteWithCache(ctx context.Context, session sqlx.Session, id uint64) error {
	tTurtleSoupStoriesIdKey := fmt.Sprintf("%s%v", cacheTTurtleSoupStoriesIdPrefix, id)
	_, err := m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.DeleteFrom(m.table)
		sb.Where(sb.EQ("`id`", id))
		statement, args := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, tTurtleSoupStoriesIdKey)
	return err
}

func (m *defaultTTurtleSoupStoriesModel) FindOne(ctx context.Context, session sqlx.Session, id uint64) (*TTurtleSoupStories, error) {
	sb := sqlbuilder.Select(tTurtleSoupStoriesRows).From(m.table)
	sb.Where(sb.EQ("`id`", id))
	sb.Limit(1)
	sql, args := sb.Build()
	var resp TTurtleSoupStories
	var err error
	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, sql, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, sql, args...)
	}
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTTurtleSoupStoriesModel) FindOneWithCache(ctx context.Context, session sqlx.Session, id uint64) (*TTurtleSoupStories, error) {
	tTurtleSoupStoriesIdKey := fmt.Sprintf("%s%v", cacheTTurtleSoupStoriesIdPrefix, id)
	var resp TTurtleSoupStories
	err := m.cachedConn.QueryRowCtx(ctx, &resp, tTurtleSoupStoriesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		sb := sqlbuilder.Select(tTurtleSoupStoriesRows).From(m.table)
		sb.Where(sb.EQ("`id`", id))
		sql, args := sb.Build()
		if session != nil {
			return session.QueryRowCtx(ctx, v, sql, args...)
		}
		return conn.QueryRowCtx(ctx, v, sql, args...)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTTurtleSoupStoriesModel) Insert(ctx context.Context, session sqlx.Session, data *TTurtleSoupStories) (sql.Result, error) {
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(tTurtleSoupStoriesRowsExpectAutoSet).
		Values(data.Title, data.Surface, data.Bottom).Build()
	if session != nil {
		return session.ExecCtx(ctx, statement, args...)
	}
	return m.conn.ExecCtx(ctx, statement, args...)
}

func (m *defaultTTurtleSoupStoriesModel) InsertWithCache(ctx context.Context, session sqlx.Session, data *TTurtleSoupStories) (sql.Result, error) {
	tTurtleSoupStoriesIdKey := fmt.Sprintf("%s%v", cacheTTurtleSoupStoriesIdPrefix, data.Id)
	statement, args := sqlbuilder.NewInsertBuilder().
		InsertInto(m.table).
		Cols(tTurtleSoupStoriesRowsExpectAutoSet).
		Values(data.Title, data.Surface, data.Bottom).Build()
	return m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, statement, args...)
		}
		return conn.ExecCtx(ctx, statement, args...)
	}, tTurtleSoupStoriesIdKey)
}
func (m *defaultTTurtleSoupStoriesModel) Update(ctx context.Context, session sqlx.Session, data *TTurtleSoupStories) error {
	sb := sqlbuilder.Update(m.table)
	split := strings.Split(tTurtleSoupStoriesRowsExpectAutoSet, ",")
	var assigns []string
	for _, s := range split {
		assigns = append(assigns, sb.Assign(s, nil))
	}
	sb.Set(assigns...)
	sb.Where(sb.EQ("`id`", nil))
	statement, _ := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, data.Title, data.Surface, data.Bottom, data.Id)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, data.Title, data.Surface, data.Bottom, data.Id)
	}
	return err
}

func (m *defaultTTurtleSoupStoriesModel) UpdateWithCache(ctx context.Context, session sqlx.Session, data *TTurtleSoupStories) error {
	tTurtleSoupStoriesIdKey := fmt.Sprintf("%s%v", cacheTTurtleSoupStoriesIdPrefix, data.Id)
	_, err := m.cachedConn.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		sb := sqlbuilder.Update(m.table)
		split := strings.Split(tTurtleSoupStoriesRowsExpectAutoSet, ",")
		var assigns []string
		for _, s := range split {
			assigns = append(assigns, sb.Assign(s, nil))
		}
		sb.Set(assigns...)
		sb.Where(sb.EQ("`id`", nil))
		statement, _ := sb.Build()
		if session != nil {
			return session.ExecCtx(ctx, statement, data.Title, data.Surface, data.Bottom, data.Id)
		}
		return conn.ExecCtx(ctx, statement, data.Title, data.Surface, data.Bottom, data.Id)
	}, tTurtleSoupStoriesIdKey)
	return err
}

func (m *defaultTTurtleSoupStoriesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTTurtleSoupStoriesIdPrefix, primary)
}

func (m *defaultTTurtleSoupStoriesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	sb := sqlbuilder.Select(tTurtleSoupStoriesRows).From(m.table)
	sb.Where(sb.EQ("`id`", primary))
	sql, args := sb.Build()
	return conn.QueryRowCtx(ctx, v, sql, args...)
}

func (m *defaultTTurtleSoupStoriesModel) tableName() string {
	return m.table
}

func (m *customTTurtleSoupStoriesModel) BulkInsert(ctx context.Context, session sqlx.Session, datas []*TTurtleSoupStories) error {
	sb := sqlbuilder.InsertInto(m.table)
	sb.Cols(tTurtleSoupStoriesRowsExpectAutoSet)
	for _, data := range datas {
		sb.Values(data.Title, data.Surface, data.Bottom)
	}
	statement, args := sb.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}

func (m *customTTurtleSoupStoriesModel) FindByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TTurtleSoupStories, error) {
	sb := sqlbuilder.Select(tTurtleSoupStoriesFieldNames...).From(m.table)
	builder := condition.Select(*sb, conds...)
	statement, args := builder.Build()

	var resp []*TTurtleSoupStories
	var err error

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *customTTurtleSoupStoriesModel) FindOneByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) (*TTurtleSoupStories, error) {
	sb := sqlbuilder.Select(tTurtleSoupStoriesFieldNames...).From(m.table)

	builder := condition.Select(*sb, conds...)
	builder.Limit(1)
	statement, args := builder.Build()

	var resp TTurtleSoupStories
	var err error

	if session != nil {
		err = session.QueryRowCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *customTTurtleSoupStoriesModel) PageByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) ([]*TTurtleSoupStories, int64, error) {
	sb := sqlbuilder.Select(tTurtleSoupStoriesFieldNames...).From(m.table)
	countsb := sqlbuilder.Select("count(*)").From(m.table)

	builder := condition.Select(*sb, conds...)

	var countConds []condition.Condition
	for _, cond := range conds {
		if cond.Operator != condition.Limit && cond.Operator != condition.Offset {
			countConds = append(countConds, cond)
		}
	}
	countBuilder := condition.Select(*countsb, countConds...)

	var resp []*TTurtleSoupStories
	var err error

	statement, args := builder.Build()

	if session != nil {
		err = session.QueryRowsCtx(ctx, &resp, statement, args...)
	} else {
		err = m.conn.QueryRowsCtx(ctx, &resp, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	var total int64
	statement, args = countBuilder.Build()
	if session != nil {
		err = session.QueryRowCtx(ctx, &total, statement, args...)
	} else {
		err = m.conn.QueryRowCtx(ctx, &total, statement, args...)
	}
	if err != nil {
		return nil, 0, err
	}

	return resp, total, nil
}

func (m *customTTurtleSoupStoriesModel) UpdateFieldsByCondition(ctx context.Context, session sqlx.Session, field map[string]any, conds ...condition.Condition) error {
	if field == nil {
		return nil
	}

	sb := sqlbuilder.Update(m.table)
	builder := condition.Update(*sb, conds...)

	var assigns []string
	for key, value := range field {
		assigns = append(assigns, sb.Assign(key, value))
	}
	builder.Set(assigns...)

	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	if err != nil {
		return err
	}
	return nil
}

func (m *customTTurtleSoupStoriesModel) DeleteByCondition(ctx context.Context, session sqlx.Session, conds ...condition.Condition) error {
	if len(conds) == 0 {
		return nil
	}
	sb := sqlbuilder.DeleteFrom(m.table)
	builder := condition.Delete(*sb, conds...)
	statement, args := builder.Build()

	var err error
	if session != nil {
		_, err = session.ExecCtx(ctx, statement, args...)
	} else {
		_, err = m.conn.ExecCtx(ctx, statement, args...)
	}
	return err
}
