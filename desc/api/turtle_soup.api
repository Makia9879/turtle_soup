syntax = "v1"

info (
	go_package: "turtlesoup"
)

type (
	// 获取活动token
	GetActivityTokenRequest  {}
	GetActivityTokenResponse {
		Token      string `json:"token"`
		ExpireTime int64  `json:"expireTime"`
	}
	// 获取会话token
	GetSessionTokenRequest {
		ActivityToken string `json:"activityToken"`
	}
	GetSessionTokenResponse {
		Token            string `json:"token"`
		RemainingTries   int    `json:"remainingTries"`
		RemainingAnswers int    `json:"remainingAnswers"`
		StoryID          int    `json:"storyId"`
		StoryTitle       string `json:"storyTitle"`
		Surface          string `json:"surface"`
	}
	// 提交解答
	SubmitAnswerRequest {
		SessionToken string                `json:"sessionToken"`
		Messages     []SubmitAnswerMessage `json:"messages"` // 聊天记录
	}
	SubmitAnswerMessage {
		Role    string `json:"role"` // 枚举值，用户消息:user; AI消息:assistant
		Content string `json:"content"`
	}
	SubmitAnswerResponse {
		Reply            string `json:"reply"`
		IsCorrect        bool   `json:"isCorrect"`
		RemainingAnswers int    `json:"remainingAnswers"` // 剩余回答次数
		RemainingTries   int    `json:"remainingTries"` // 剩余游戏次数
		StoryAnswer      string `json:"storyAnswer,optional"` // 仅当解答正确时返回
		NewStoryId       int64  `json:"newStoryId,optional"` // 仅当需要开启新故事时返回
		NewStoryTitle    string `json:"newStoryTitle,optional"` // 仅当需要开启新故事时返回
		NewSurface       string `json:"newSurface,optional"` // 仅当需要开启新故事时返回
	}
)

@server (
	prefix: /api/v1
	group:  turtlesoup
)
service turtleSoup {
	// 获取活动token
	@handler GetActivityToken
	get /activity/token (GetActivityTokenRequest) returns (GetActivityTokenResponse)

	// 获取会话token和第一个故事
	@handler GetSessionToken
	post /session/token (GetSessionTokenRequest) returns (GetSessionTokenResponse)

	// 提交解答
	@handler SubmitAnswer
	post /submit/answer (SubmitAnswerRequest) returns (SubmitAnswerResponse)
}

